def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

def version_code_env = System.getenv("version_code")
def version_name_env = System.getenv("version_name")
def app_name_env = System.getenv("app_name")
def suffix_env =  System.getenv("suffix")

def version_code =  version_code_env != null ? Integer.parseInt(version_code_env): 1
def version_name =  version_name_env != null ? version_name_env : "0.1"
def app_name     =  app_name_env     != null ? '"' + app_name_env + '"' : '"Brogue"'
def suffix       =  suffix_env != null ? '.'+suffix_env.replace('-','')
        .replace('.','').replace(' ',''):null

android {
    compileSdkVersion 26
    defaultConfig {
        if(suffix_env) {
            applicationId "org.brogue.brogue" + suffix
        }else{
            applicationId "org.brogue.brogue"
        }
        resValue 'string', 'app_name', app_name
        minSdkVersion 16
        targetSdkVersion 26
        versionCode version_code
        versionName version_name
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-16"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lint {
        abortOnError false
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
        }
       
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.brogue.brogue.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
